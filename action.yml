name: Replay Playwright
author: Replay.io
description: Run and record Playwright tests with Replay
inputs:
  working-directory:
    description: "Relative path to app"
    default: "."
  command:
    description: "Command to run tests"
    default: "npx playwright test"
  project:
    description: "Project for replay browser"
    default: "replay-chromium"
  issue-number:
    description: "Pull Request on which to comment results"
  apiKey:
    required: true
    description: "Replay.io API Key"
  public:
    description: "Makes the uploaded replay viewable by everyone"
    default: false
  upload-all:
    description: "Upload all recordings instead of only recordings of failed tests"
    default: false
  source:
    description: "Optional name of source included in comment"
runs:
  using: composite
  steps:
    - run: npm i @replayio/playwright@">=0.2.0"
      shell: sh
    - run: ${{ inputs.command }} --project ${{ inputs.project }} --reporter=line,@replayio/playwright/reporter
      shell: sh
      working-directory: ${{ inputs.working-directory }}
    - name: 'Upload Recordings'
      id: 'upload-recordings'
      uses: replayio/action-upload@ryan-source-metadata
      if: ${{ always() }}
      with:
        apiKey: ${{ inputs.apiKey }}
        public: ${{ inputs.public }}
        filter: ${{ !inputs.upload-all && 'function($v) { $v.metadata.testStatus = "failed" and $v.status = "onDisk" }' || '' }}
      env:
        RECORD_REPLAY_API_KEY: ${{ inputs.apiKey }}
    - name: 'Comment PR'
      uses: actions/github-script@v6
      if: ${{ always() }}
      env:
        ISSUE_NUMBER: ${{ inputs.issue-number }}
      with:
        result-encoding: string
        script: |
          const comment = require(process.env.GITHUB_ACTION_PATH + '/comment.js');

          const recordings = ${{ steps.upload-recordings.outputs.recordings || '[]' }};
          const {ISSUE_NUMBER: issue_number} = process.env;
          const uploadAll = ${{ inputs.upload-all || false }};
          const source =  "${{ inputs.source || '' }}";

          return await comment({context, github, issue_number, recordings, uploadAll, source });

